version: '3.8'

services:
  microblog:
    image: ${REGISTRY_URL}/microblog:latest
    environment:
      - DATABASE_URL=postgresql://postgres:microblog@postgres:5432/microblog
      - FLASK_ENV=${FLASK_ENV}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_TO_STDOUT=${LOG_TO_STDOUT}
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "service=microblog"
    ports:
      - "5000:5000"
      - "9100:9100"
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - microblog-net
    depends_on:
      - postgres

  prometheus:
    image: ${REGISTRY_URL}/prometheus:latest
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - microblog-net
    volumes:
      - prometheus-data:/prometheus

  loki:
    image: grafana/loki:latest
    networks:
      - microblog-net
    volumes:
      - loki-data:/loki

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - microblog-net
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  nginx:
    image: ${REGISTRY_URL}/nginx:latest
    ports:
      - "443:443"
      - "9090:9090"
      - "3000:3000"
    environment:
      - MANAGER_IP=${MANAGER_IP}
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-external-labels: "service=nginx"
    depends_on:
      - microblog
      - prometheus
      - grafana
      - loki
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - microblog-net

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    environment:
      - NGINX_SCRAPE_URI=http://nginx:9113/stub_status
    networks:
      - microblog-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=microblog
      - POSTGRES_DB=microblog
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - microblog-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:microblog@postgres:5432/microblog?sslmode=disable
    networks:
      - microblog-net
    deploy:
      placement:
        constraints:
          - node.role == manager

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - microblog-net
    deploy:
      placement:
        constraints:
          - node.role == manager

networks:
  microblog-net:
    driver: overlay
    attachable: true

volumes:
  grafana-data:
  prometheus-data:
  registry-data:
  postgres-data:
  loki-data:
